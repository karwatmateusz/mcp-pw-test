name: Playwright Tests with Repository Dispatch
on:
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
    
    - uses: actions/cache@v3
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Cache Playwright browsers
      uses: actions/cache@v3
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
    
    # - name: Install dependencies
    #   run: npm ci
    
    # - name: Install Playwright Browsers
    #   if: steps.playwright-cache.outputs.cache-hit != 'true'
    #   run: npx playwright install --with-deps chromium
    
    # - name: Run Playwright tests
    #   run: npx playwright test
    
    # - name: Trigger Playwright-template tests
    #   if: success()
    #   uses: peter-evans/repository-dispatch@v2
    #   with:
    #     token: ${{ secrets.PAT_TOKEN }}
    #     repository: karwatmateusz/Playwright-template
    #     event-type: trigger-tests
    #     client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "pr_number": "${{ github.event.pull_request.number }}"}'

    # - name: Wait for Playwright-template workflow
    #   uses: convictional/trigger-workflow-and-wait@v1.6.1
    #   with:
    #     owner: karwatmateusz
    #     repo: Playwright-template
    #     github_token: ${{ secrets.PAT_TOKEN }}
    #     workflow_file_name: dispatch-handler.yml
    #     ref: master
    #     wait_interval: 10
    #     trigger_workflow: true
    #     wait_workflow: true
    # # - uses: actions/upload-artifact@v4
    # #   if: always()
    # #   with:
    # #     name: playwright-report
    # #     path: playwright-report/
    # #     retention-days: 30

    # - name: Trigger and wait for E2E tests
    #   id: trigger-tests
    #   uses: aurelien-baudet/workflow-dispatch@v2
    #   with:
    #     workflow: dispatch-handler.yml
    #     repo: karwatmateusz/Playwright-template
    #     ref: master
    #     token: ${{ secrets.PAT_TOKEN }}
    #     wait-for-completion: true
    
    # - name: Check E2E test results
    #   if: always()
    #   run: echo 'E2E tests conclusion ${{ steps.trigger-tests.outputs.workflow-conclusion }}'

    - name: Trigger workflow
      run: |
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/karwatmateusz/Playwright-template/actions/workflows/dispatch-handler.yml/dispatches \
          -d '{"ref":"master"}'
        
    - name: Wait for workflow to complete
      run: |
        # Wait a bit for the workflow to start
        sleep 10
        
        # Poll until completion
        while true; do
          run_data=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/karwatmateusz/Playwright-template/actions/workflows/dispatch-handler.yml/runs?branch=master&per_page=1")
          
          status=$(echo "$run_data" | jq -r '.workflow_runs[0].status')
          conclusion=$(echo "$run_data" | jq -r '.workflow_runs[0].conclusion')
          run_id=$(echo "$run_data" | jq -r '.workflow_runs[0].id')
          
          echo "workflow (ID: $run_id) status: $status, conclusion: $conclusion"
          
          if [ "$status" = "completed" ]; then
            if [ "$conclusion" = "success" ]; then
              echo "workflow completed successfully!"
              exit 0
            else
              echo "workflow failed with conclusion: $conclusion"
              exit 1
            fi
          fi
          
          echo "Waiting for workflow to complete..."
          sleep 30
        done
